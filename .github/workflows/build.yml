name: build
on: [push, workflow_dispatch]

env:
  LIBPLIST_VERSION: 2.2.0
  OPENSSL_VERSION: 1.1.1k
  LIBCURL_VERSION: 7.78.0
  ZLIB_VERSION: 1.2.11
  LIBZIP_VERSION: 1.7.3
  LIBGENERAL_VERSION: 56
  LIBFRAGMENTZIP_VERSION: 60
  LIBIRECOVERY_VERSION: 1.0.0

jobs:
  build-linux:
    runs-on: ubuntu-latest
    env:
      TOOLCHAIN: x86_64-linux-musl-cross
      TRIPLE: x86_64-linux-musl
    steps:
      - uses: actions/checkout@v1
        with:
          submodules: recursive

      - name: cache files
        uses: actions/cache@v2
        with:
          path: |
            ~/.ccache
            ~/dep_src
          key: build-linux-${ { env.GITHUB_SHA } }
          restore-keys: |
            build-linux-

      - name: setup environment
        run: |
          export DOWNLOAD_PATH=${HOME}/dep_src
          export DEP_PATH=${HOME}/build
          export ROOT=${HOME}/root
          mkdir -p ${DOWNLOAD_PATH} ${DEP_PATH} ${ROOT}
          echo "DOWNLOAD_PATH=${DOWNLOAD_PATH}" >> $GITHUB_ENV
          echo "DEP_PATH=${DEP_PATH}" >> $GITHUB_ENV
          echo "ROOT=${ROOT}" >> $GITHUB_ENV
          echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
          echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"

      - name: setup toolchain
        run: |
          sudo apt-get install -y ccache
          wget -q -nc -P ${DOWNLOAD_PATH} https://musl.cc/${TOOLCHAIN}.tgz
          tar xf ${DOWNLOAD_PATH}/${TOOLCHAIN}.tgz -C ${HOME}
          echo "${HOME}/${TOOLCHAIN}/bin" >> $GITHUB_PATH
          echo "CC=ccache ${TRIPLE}-gcc" >> $GITHUB_ENV
          echo "CXX=ccache ${TRIPLE}-g++" >> $GITHUB_ENV
          echo "CFLAGS=-static -I${ROOT}/usr/include" >> $GITHUB_ENV
          echo "LDFLAGS=-L${ROOT}/usr/lib" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=${ROOT}/usr/lib/pkgconfig" >> $GITHUB_ENV
          echo "LD_LIBRARY_PATH=${ROOT}/usr/lib" >> $GITHUB_ENV

      - name: build libplist
        run: |
          wget -q -nc -P ${DOWNLOAD_PATH} https://github.com/libimobiledevice/libplist/releases/download/${LIBPLIST_VERSION}/libplist-${LIBPLIST_VERSION}.tar.bz2
          tar xf ${DOWNLOAD_PATH}/libplist-${LIBPLIST_VERSION}.tar.bz2 -C ${DEP_PATH}
          cd ${DEP_PATH}/libplist-${LIBPLIST_VERSION}
          ./configure --host=${TRIPLE} --prefix=/usr --without-cython --enable-static --disable-shared
          make -j$(nproc)
          make install DESTDIR="${ROOT}"

      - name: build libirecovery
        run: |
          wget -q -nc -P ${DOWNLOAD_PATH} https://github.com/libimobiledevice/libirecovery/releases/download/${LIBIRECOVERY_VERSION}/libirecovery-${LIBIRECOVERY_VERSION}.tar.bz2
          tar xf ${DOWNLOAD_PATH}/libirecovery-${LIBIRECOVERY_VERSION}.tar.bz2 -C ${DEP_PATH}
          cd ${DEP_PATH}/libirecovery-${LIBIRECOVERY_VERSION}
          wget https://gist.github.com/1Conan/2d015aad17f87f171b32ebfd9f48fb96/raw/c12fca047f8b0bba1c8983470bf863d80d7e1c1d/libirecovery.patch
          patch -p1 < libirecovery.patch
          libtoolize --force
          aclocal -I m4
          autoheader
          automake --add-missing
          autoconf
          ./configure --host=${TRIPLE} --prefix=/usr --enable-static --disable-shared --with-dummy
          make -j$(nproc)
          make install DESTDIR="${ROOT}"

      - name: build zlib
        run: |
          wget -q -nc -P ${DOWNLOAD_PATH} https://zlib.net/zlib-${ZLIB_VERSION}.tar.gz
          tar xf ${DOWNLOAD_PATH}/zlib-${ZLIB_VERSION}.tar.gz -C ${DEP_PATH}
          cd ${DEP_PATH}/zlib-${ZLIB_VERSION}
          ./configure --static --prefix=/usr
          make -j$(nproc)
          make install DESTDIR="${ROOT}"

      - name: build openssl
        run: |
          wget -q -nc -P ${DOWNLOAD_PATH} https://www.openssl.org/source/openssl-${OPENSSL_VERSION}.tar.gz
          tar xf ${DOWNLOAD_PATH}/openssl-${OPENSSL_VERSION}.tar.gz -C ${DEP_PATH}
          cd ${DEP_PATH}/openssl-${OPENSSL_VERSION}
          ./config --prefix=/usr --openssldir=/etc/ssl --static -static
          make -j$(nproc)
          make install_sw DESTDIR="${ROOT}"

      - name: build libcurl
        run: |
          wget -q -nc -P ${DOWNLOAD_PATH} https://curl.haxx.se/download/curl-${LIBCURL_VERSION}.tar.gz
          tar xf ${DOWNLOAD_PATH}/curl-${LIBCURL_VERSION}.tar.gz -C ${DEP_PATH}
          cd ${DEP_PATH}/curl-${LIBCURL_VERSION}
          ./configure \
            --prefix=/usr \
            --host=${TRIPLE} \
            --enable-static \
            --disable-shared \
            --enable-ipv6 \
            --disable-dependency-tracking \
            --with-zlib=${ROOT}/usr \
            --with-ssl=${ROOT}/usr
          make -j$(nproc)
          make install DESTDIR="${ROOT}"

      - name: build libzip
        run: |
          wget -q -nc -P ${DOWNLOAD_PATH} https://libzip.org/download/libzip-${LIBZIP_VERSION}.tar.gz
          tar xf ${DOWNLOAD_PATH}/libzip-${LIBZIP_VERSION}.tar.gz -C ${DEP_PATH}
          cd ${DEP_PATH}/libzip-${LIBZIP_VERSION}
          cmake \
            -DBUILD_SHARED_LIBS=OFF \
            -DCMAKE_EXE_LINKER_FLAGS="-static" \
            -DCMAKE_FIND_LIBRARY_SUFFIXES=".a" \
            -DENABLE_BZIP2=FALSE \
            -DENABLE_LZMA=FALSE \
            -DCMAKE_INSTALL_PREFIX=/usr \
            -DSKIP_BUILD_RPATH=TRUE \
            -DZLIB_LIBRARY=${ROOT}/usr/lib/libz.a \
            -DZLIB_INCLUDE_DIR=${ROOT}/usr/include \
            -DOPENSSL_CRYPTO_LIBRARY=${ROOT}/usr/lib/libcrypto.a \
            -DOPENSSL_SSL_LIBRARY=${ROOT}/usr/lib/libssl.a
          make -j$(nproc)
          make install DESTDIR="${ROOT}"

      - name: build libgeneral
        run: |
          rm -rf ${DEP_PATH}/libgeneral
          git clone https://github.com/tihmstar/libgeneral ${DEP_PATH}/libgeneral
          cd ${DEP_PATH}/libgeneral
          git checkout f571dc2949c4ca4c9b5db72fff35878717e5ce0b
          ./autogen.sh --enable-static --disable-shared --host=${TRIPLE} --prefix=/usr
          make -j$(nproc)
          make install DESTDIR="${ROOT}"
      - name: build libfragmentzip
        run: |
          rm -rf ${DEP_PATH}/libfragmentzip
          git clone https://github.com/tihmstar/libfragmentzip.git ${DEP_PATH}/libfragmentzip
          cd ${DEP_PATH}/libfragmentzip
          ./autogen.sh curl_LIBS="${ROOT}/usr/lib/libcurl.a" \
            --prefix=/usr \
            --host=${TRIPLE} \
            --enable-static \
            --disable-shared
          make -j$(nproc)
          make install DESTDIR="${ROOT}"
      - name: configure
        run: ./autogen.sh --host=${TRIPLE} --enable-static --disable-shared

      - name: build
        run: |
          make LDFLAGS="-all-static ${LDFLAGS}"
          ${TRIPLE}-strip tsschecker/tsschecker

      - uses: actions/upload-artifact@v1
        with:
          name: tsschecker_linux
          path: tsschecker/tsschecker

  build-windows:
    runs-on: ubuntu-latest
    env:
      TOOLCHAIN: x86_64-w64-mingw32-cross
      TRIPLE: x86_64-w64-mingw32
    steps:
      - uses: actions/checkout@v1
        with:
          submodules: recursive

      - name: ccache cache files
        uses: actions/cache@v2
        with:
          path: |
            ~/.ccache
            ~/dep_src
          key: build-windows-${ { env.GITHUB_SHA } }
          restore-keys: |
            build-windows-

      - name: setup environment
        run: |
          export DOWNLOAD_PATH=${HOME}/dep_src
          export DEP_PATH=${HOME}/build
          export ROOT=${HOME}/root
          mkdir -p ${DOWNLOAD_PATH} ${DEP_PATH} ${ROOT}
          echo "DOWNLOAD_PATH=${DOWNLOAD_PATH}" >> $GITHUB_ENV
          echo "DEP_PATH=${DEP_PATH}" >> $GITHUB_ENV
          echo "ROOT=${ROOT}" >> $GITHUB_ENV
          echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
          echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"

      - name: setup toolchain
        run: |
          sudo apt-get install -y ccache
          wget -q -nc -P ${DOWNLOAD_PATH} https://musl.cc/${TOOLCHAIN}.tgz
          tar xf ${DOWNLOAD_PATH}/${TOOLCHAIN}.tgz -C ${HOME}
          echo "${HOME}/${TOOLCHAIN}/bin" >> $GITHUB_PATH
          echo "CC=ccache ${TRIPLE}-gcc" >> $GITHUB_ENV
          echo "CXX=ccache ${TRIPLE}-g++" >> $GITHUB_ENV
          echo "CFLAGS=-static" >> $GITHUB_ENV
          echo "CPPFLAGS=-I${ROOT}/usr/include -I${HOME}/${TOOLCHAIN}/${TRIPLE}/include -DWIN32 -D_WIN32_WINNT=0x0501" >> $GITHUB_ENV
          echo "LDFLAGS=-L${ROOT}/usr/lib -L${HOME}/${TOOLCHAIN}/${TRIPLE}/lib" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=${ROOT}/usr/lib/pkgconfig" >> $GITHUB_ENV
          echo "LD_LIBRARY_PATH=${ROOT}/usr/lib" >> $GITHUB_ENV

      - name: build libplist
        run: |
          wget -q -nc -P ${DOWNLOAD_PATH} https://github.com/libimobiledevice/libplist/releases/download/${LIBPLIST_VERSION}/libplist-${LIBPLIST_VERSION}.tar.bz2
          tar xf ${DOWNLOAD_PATH}/libplist-${LIBPLIST_VERSION}.tar.bz2 -C ${DEP_PATH}
          cd ${DEP_PATH}/libplist-${LIBPLIST_VERSION}
          ./configure --host=${TRIPLE} --prefix=/usr --without-cython --enable-static --disable-shared
          make -j$(nproc)
          make install DESTDIR="${ROOT}"

      - name: build libirecovery
        run: |
          wget -q -nc -P ${DOWNLOAD_PATH} https://github.com/libimobiledevice/libirecovery/releases/download/${LIBIRECOVERY_VERSION}/libirecovery-${LIBIRECOVERY_VERSION}.tar.bz2
          tar xf ${DOWNLOAD_PATH}/libirecovery-${LIBIRECOVERY_VERSION}.tar.bz2 -C ${DEP_PATH}
          cd ${DEP_PATH}/libirecovery-${LIBIRECOVERY_VERSION}
          wget https://gist.github.com/1Conan/2d015aad17f87f171b32ebfd9f48fb96/raw/c12fca047f8b0bba1c8983470bf863d80d7e1c1d/libirecovery.patch
          patch -p1 < libirecovery.patch
          libtoolize --force
          aclocal -I m4
          autoheader
          automake --add-missing
          autoconf
          ./configure --host=${TRIPLE} --prefix=/usr --enable-static --disable-shared --with-dummy
          make -j$(nproc)
          make install DESTDIR="${ROOT}"

      - name: build zlib
        run: |
          wget -q -nc -P ${DOWNLOAD_PATH} https://zlib.net/zlib-${ZLIB_VERSION}.tar.gz
          tar xf ${DOWNLOAD_PATH}/zlib-${ZLIB_VERSION}.tar.gz -C ${DEP_PATH}
          cd ${DEP_PATH}/zlib-${ZLIB_VERSION}
          ./configure --static --prefix=/usr
          make -j$(nproc)
          make install DESTDIR="${ROOT}"

      - name: build libcurl
        run: |
          wget -q -nc -P ${DOWNLOAD_PATH} https://curl.haxx.se/download/curl-${LIBCURL_VERSION}.tar.gz
          tar xf ${DOWNLOAD_PATH}/curl-${LIBCURL_VERSION}.tar.gz -C ${DEP_PATH}
          cd ${DEP_PATH}/curl-${LIBCURL_VERSION}
          ./configure \
            --prefix=/usr \
            --host=${TRIPLE} \
            --enable-static \
            --disable-shared \
            --enable-ipv6 \
            --disable-dependency-tracking \
            --with-zlib=${ROOT}/usr \
            --with-winssl \
            --with-schannel
          make -j$(nproc)
          make install DESTDIR="${ROOT}"

      - name: build openssl
        run: |
          wget -nc -P ${DOWNLOAD_PATH} https://www.openssl.org/source/openssl-${OPENSSL_VERSION}.tar.gz
          tar xf ${DOWNLOAD_PATH}/openssl-${OPENSSL_VERSION}.tar.gz -C ${DEP_PATH}
          cd ${DEP_PATH}/openssl-${OPENSSL_VERSION}
          CC= CXX= ./Configure --cross-compile-prefix=${TRIPLE}- --prefix=/usr --static -static mingw64
          make -j$(nproc) CC="${CC}" CXX="${CXX}"
          make install_sw DESTDIR="${ROOT}"

      - name: build libzip
        run: |
          wget -q -nc -P ${DOWNLOAD_PATH} https://libzip.org/download/libzip-${LIBZIP_VERSION}.tar.gz
          tar xf ${DOWNLOAD_PATH}/libzip-${LIBZIP_VERSION}.tar.gz -C ${DEP_PATH}
          cd ${DEP_PATH}/libzip-${LIBZIP_VERSION}
          cmake \
            -DCMAKE_SYSTEM_NAME=Windows \
            -DCMAKE_CROSSCOMPILING=TRUE \
            -DBUILD_SHARED_LIBS=OFF \
            -DCMAKE_SHARED_LIBRARY_LINK_C_FLAGS="" \
            -DCMAKE_SHARED_LIBRARY_LINK_CXX_FLAGS="" \
            -DCMAKE_C_FLAGS="${CFLAGS}" \
            -DCMAKE_CXX_FLAGS="" \
            -DCMAKE_EXE_LINKER_FLAGS="-static" \
            -DCMAKE_FIND_LIBRARY_SUFFIXES=".a" \
            -DENABLE_BZIP2=FALSE \
            -DENABLE_LZMA=FALSE \
            -DCMAKE_INSTALL_PREFIX=/usr \
            -DSKIP_BUILD_RPATH=TRUE \
            -DZLIB_LIBRARY=${ROOT}/usr/lib/libz.a \
            -DZLIB_INCLUDE_DIR=${ROOT}/usr/include
          make -j$(nproc)
          make install DESTDIR="${ROOT}"

      - name: build libgeneral
        run: |
          rm -rf ${DEP_PATH}/libgeneral
          git clone https://github.com/tihmstar/libgeneral ${DEP_PATH}/libgeneral
          cd ${DEP_PATH}/libgeneral
          git checkout f571dc2949c4ca4c9b5db72fff35878717e5ce0b
          sed -i '/using namespace tihmstar/a \
          int vasprintf(char **s, const char *fmt, va_list ap) {\
          \n\tva_list ap2;\n\tva_copy(ap2, ap);\
          \n\tint l = vsnprintf(0, 0, fmt, ap2);\
          \n\tva_end(ap2);\n\tif (l<0 || !(*s=(char*)malloc(l+1U))) return -1;\
          \n\treturn vsnprintf(*s, l+1U, fmt, ap);\
          \n}' ${DEP_PATH}/libgeneral/libgeneral/exception.cpp
          ./autogen.sh --enable-static --disable-shared --host=${TRIPLE} --prefix=/usr
          make -j$(nproc)
          make install DESTDIR="${ROOT}"

      - name: build libfragmentzip
        run: |
          rm -rf ${DEP_PATH}/libfragmentzip
          git clone https://github.com/tihmstar/libfragmentzip.git ${DEP_PATH}/libfragmentzip
          cd ${DEP_PATH}/libfragmentzip
          ./autogen.sh curl_LIBS="${ROOT}/usr/lib/libcurl.a" \
            --prefix=/usr \
            --host=${TRIPLE} \
            --enable-static \
            --disable-shared
          make -j$(nproc)
          make install DESTDIR="${ROOT}"

      - name: configure
        run: ./autogen.sh --host=${TRIPLE} --enable-static --disable-shared

      - name: build
        run: |
          make LDFLAGS="-all-static ${LDFLAGS} -lws2_32" LIBS="-lws2_32 -lcrypt32"
          ${TRIPLE}-strip tsschecker/tsschecker.exe
      - uses: actions/upload-artifact@v1
        with:
          name: tsschecker_windows
          path: tsschecker/tsschecker.exe

  build-macos:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v1
        with:
          submodules: recursive

      - name: ccache cache files
        uses: actions/cache@v2
        with:
          path: |
            ~/.ccache
            ~/dep_src
          key: build-macos-${ { env.GITHUB_SHA } }
          restore-keys: |
            build-macos-

      - name: setup environment
        run: |
          export DOWNLOAD_PATH=${HOME}/dep_src
          export DEP_PATH=${HOME}/build
          export ROOT=${HOME}/root
          mkdir -p ${DOWNLOAD_PATH} ${DEP_PATH} ${ROOT}
          echo "DOWNLOAD_PATH=${DOWNLOAD_PATH}" >> $GITHUB_ENV
          echo "DEP_PATH=${DEP_PATH}" >> $GITHUB_ENV
          echo "ROOT=${ROOT}" >> $GITHUB_ENV
          echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
          echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"

      - name: setup toolchain
        run: |
          brew install ccache libtool autoconf automake
          echo "CC=ccache clang" >> $GITHUB_ENV
          echo "CXX=ccache clang++" >> $GITHUB_ENV
          echo "CPPFLAGS=-I${ROOT}/usr/include" >> $GITHUB_ENV
          echo "LDFLAGS=-L${ROOT}/usr/lib" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=${ROOT}/usr/lib/pkgconfig" >> $GITHUB_ENV
          echo "LD_LIBRARY_PATH=${ROOT}/usr/lib" >> $GITHUB_ENV

      - name: build libplist
        run: |
          wget -q -nc -P ${DOWNLOAD_PATH} https://github.com/libimobiledevice/libplist/releases/download/${LIBPLIST_VERSION}/libplist-${LIBPLIST_VERSION}.tar.bz2
          tar xf ${DOWNLOAD_PATH}/libplist-${LIBPLIST_VERSION}.tar.bz2 -C ${DEP_PATH}
          cd ${DEP_PATH}/libplist-${LIBPLIST_VERSION}
          ./configure --prefix=/usr --without-cython --enable-static --disable-shared
          make
          make install DESTDIR="${ROOT}"

      - name: build libirecovery
        run: |
          wget -q -nc -P ${DOWNLOAD_PATH} https://github.com/libimobiledevice/libirecovery/releases/download/${LIBIRECOVERY_VERSION}/libirecovery-${LIBIRECOVERY_VERSION}.tar.bz2
          tar xf ${DOWNLOAD_PATH}/libirecovery-${LIBIRECOVERY_VERSION}.tar.bz2 -C ${DEP_PATH}
          cd ${DEP_PATH}/libirecovery-${LIBIRECOVERY_VERSION}
          wget https://gist.github.com/1Conan/2d015aad17f87f171b32ebfd9f48fb96/raw/c12fca047f8b0bba1c8983470bf863d80d7e1c1d/libirecovery.patch
          patch -p1 < libirecovery.patch
          glibtoolize --force
          aclocal -I m4
          autoheader
          automake --add-missing
          autoconf
          ./configure --prefix=/usr --enable-static --disable-shared --with-dummy
          make
          make install DESTDIR="${ROOT}"

      - name: build libcurl
        run: |
          wget -q -nc -P ${DOWNLOAD_PATH} https://curl.haxx.se/download/curl-${LIBCURL_VERSION}.tar.gz
          tar xf ${DOWNLOAD_PATH}/curl-${LIBCURL_VERSION}.tar.gz -C ${DEP_PATH}
          cd ${DEP_PATH}/curl-${LIBCURL_VERSION}
          ./configure \
            --prefix=/usr \
            --enable-static \
            --disable-shared \
            --enable-ipv6 \
            --disable-dependency-tracking \
            --with-zlib=${ROOT}/usr \
            --with-darwinssl \
            --with-secure-transport \
            --without-ca-bundle \
            --without-ca-path \
            --without-zstd \
            --without-brotli \
            --disable-ldap \
            --disable-ldaps \
            --without-libidn2 \
            --without-nghttp2 \
            --without-librtmp
          make
          make install DESTDIR="${ROOT}"

      - name: build libzip
        run: |
          wget -q -nc -P ${DOWNLOAD_PATH} https://libzip.org/download/libzip-${LIBZIP_VERSION}.tar.gz
          tar xf ${DOWNLOAD_PATH}/libzip-${LIBZIP_VERSION}.tar.gz -C ${DEP_PATH}
          cd ${DEP_PATH}/libzip-${LIBZIP_VERSION}
          cmake \
            -DBUILD_SHARED_LIBS=OFF \
            -DCMAKE_FIND_LIBRARY_SUFFIXES=".a" \
            -DENABLE_BZIP2=FALSE \
            -DENABLE_LZMA=FALSE \
            -DCMAKE_INSTALL_PREFIX=/usr \
            -DSKIP_BUILD_RPATH=TRUE
          make
          make install DESTDIR="${ROOT}"

      - name: build libgeneral
        run: |
          wget -q -nc -P ${DOWNLOAD_PATH} \
            https://github.com/tihmstar/libgeneral/releases/download/${LIBGENERAL_VERSION}/buildroot_macos-latest.zip
          unzip ${DOWNLOAD_PATH}/buildroot_macos-latest.zip -d ${HOME}
          rsync -a ${HOME}/buildroot_macos-latest/usr/local/ ${ROOT}/usr/
          rm -rf ${HOME}/buildroot_macos-latest ${DOWNLOAD_PATH}/buildroot_macos-latest.zip

      - name: build libfragmentzip
        run: |
          wget -q -nc -P ${DOWNLOAD_PATH} \
            https://github.com/tihmstar/libfragmentzip/releases/download/${LIBFRAGMENTZIP_VERSION}/buildroot_macos-latest.zip
          unzip ${DOWNLOAD_PATH}/buildroot_macos-latest.zip -d ${HOME}
          rsync -a ${HOME}/buildroot_macos-latest/usr/local/ ${ROOT}/usr/
          rm -rf ${HOME}/buildroot_macos-latest ${DOWNLOAD_PATH}/buildroot_macos-latest.zip

      - name: configure
        run: |
          ./autogen.sh \
            --enable-static \
            --disable-shared \
      - name: build
        run: |
          make LDFLAGS="-all-static ${LDFLAGS}"
          strip tsschecker/tsschecker
      - uses: actions/upload-artifact@v1
        with:
          name: tsschecker_macos
          path: tsschecker/tsschecker

  releases:
    runs-on: ubuntu-latest
    needs: [build-linux, build-windows, build-macos]
    steps:
      - uses: actions/checkout@v1

      - name: Download linux artifact
        uses: actions/download-artifact@v1
        with:
          name: tsschecker_linux
          path: tsschecker_linux
      - name: Download windows artifact
        uses: actions/download-artifact@v1
        with:
          name: tsschecker_windows
          path: tsschecker_windows
      - name: Download macos artifact
        uses: actions/download-artifact@v1
        with:
          name: tsschecker_macos
          path: tsschecker_macos

      - name: Set env vars
        run: |
          echo "BUILD_VERSION_NUM=$(echo "$(git rev-list --count HEAD | tr -d '\n')")" >> $GITHUB_ENV
          echo "BUILD_VERSION_SHA=$(echo "$(git rev-parse HEAD | tr -d '\n'])")" >> $GITHUB_ENV
          echo "BUILD_VERSION_STR=$(echo "$(git rev-list --count HEAD | tr -d '\n')-$(git rev-parse HEAD | tr -d '\n'])")" >> $GITHUB_ENV
          echo "COMMIT_MSG=$(echo "$(git log -1 --pretty=%B)")" >> $GITHUB_ENV
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.BUILD_VERSION_NUM }}
          release_name: Build ${{ env.BUILD_VERSION_STR }}
          body: ${{ env.COMMIT_MSG }}
          draft: false
          prerelease: true
      - name: Upload Release Asset linux
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./tsschecker_linux/tsschecker
          asset_name: tsschecker_linux
          asset_content_type: application/x-pie-executable
      - name: Upload Release Asset windows
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./tsschecker_windows/tsschecker.exe
          asset_name: tsschecker.exe
          asset_content_type: application/x-msdownload
      - name: Upload Release Asset macos
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./tsschecker_macos/tsschecker
          asset_name: tsschecker_macos
          asset_content_type: application/x-mach-binary

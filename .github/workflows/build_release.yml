name: Build & Release
on: [push]
env:
  LIBPLIST_VERSION: 2.2.0
  OPENSSL_VERSION: 1.1.1k
  LIBCURL_VERSION: 7.78.0
  ZLIB_VERSION: 1.2.11
  LIBZIP_VERSION: 1.7.3
  LIBGENERAL_VERSION: 56
  LIBFRAGMENTZIP_VERSION: 60
  LIBIRECOVERY_VERSION: 1.0.0
  LIBGENERAL_COMMIT: e0d98cbeedece5d62e3e9432c3ed37cd87da5338
  MINGW_STD_THREADS_VERSION: 1.0.0

jobs:

  build-win-lin:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        triple: [x86_64-linux-musl,x86_64-w64-mingw32]
    steps:
    - uses: actions/checkout@v1
      with:
        submodules: recursive

    - name: cache files
      uses: actions/cache@v2
      with:
        path: |
          ~/.ccache
          ~/dep_src
        key: build-win-linux-${ { env.GITHUB_SHA } }
        restore-keys: |
          build-win-linux-

    - name: setup environment
      run: |
        export DOWNLOAD_PATH=${HOME}/dep_src
        export DEP_PATH=${HOME}/build
        export ROOT=${HOME}/root
        mkdir -p ${DOWNLOAD_PATH} ${DEP_PATH} ${ROOT}
        echo "DOWNLOAD_PATH=${DOWNLOAD_PATH}" >> $GITHUB_ENV
        echo "DEP_PATH=${DEP_PATH}" >> $GITHUB_ENV
        echo "ROOT=${ROOT}" >> $GITHUB_ENV
        echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"

        echo "TRIPLE=${{ matrix.triple }}" >> $GITHUB_ENV
        echo "TOOLCHAIN=${{ matrix.triple }}-cross" >> $GITHUB_ENV

        export ARCH=$(echo ${TRIPLE} | cut -d- -f 1)
        export OS=$(echo ${TRIPLE} | cut -d- -f 2)

        if [ "${OS}" = "w64" ]; then
          export OS="win"
        fi

        echo "OS=${OS}" >> $GITHUB_ENV
        echo "ARCH=${ARCH}" >> $GITHUB_ENV

        if [ "${OS}" = "win" ]; then
          echo "EXE_SUFFIX=.exe" >> $GITHUB_ENV
        else
          echo "EXE_SUFFIX=" >> $GITHUB_ENV
        fi


    - name: Download and setup toolchain
      run: |
        sudo apt-get install -y ccache
        wget -q -nc -P ${DOWNLOAD_PATH} https://musl.cc/${TOOLCHAIN}.tgz
        tar xf ${DOWNLOAD_PATH}/${TOOLCHAIN}.tgz -C ${HOME}
        if [ "${OS}" = "win" ]; then
          wget -q -nc -P ${DOWNLOAD_PATH} \
            https://github.com/meganz/mingw-std-threads/archive/refs/tags/${MINGW_STD_THREADS_VERSION}.tar.gz
          mkdir -p ${ROOT}/usr/include
          tar xf ${DOWNLOAD_PATH}/${MINGW_STD_THREADS_VERSION}.tar.gz -C ${DEP_PATH}
        fi
        echo "${HOME}/${TOOLCHAIN}/bin" >> $GITHUB_PATH
        echo "CC=ccache ${TRIPLE}-gcc" >> $GITHUB_ENV
        echo "CXX=ccache ${TRIPLE}-g++" >> $GITHUB_ENV
        echo "CFLAGS=-Os -Wall -static" >> $GITHUB_ENV
        echo "CXXFLAGS=${CFLAGS}" >> $GITHUB_ENV
        echo "CPPFLAGS=-I${ROOT}/usr/include -I${DEP_PATH}/mingw-std-threads-${MINGW_STD_THREADS_VERSION}" >> $GITHUB_ENV
        echo "LDFLAGS=-L${ROOT}/usr/lib -L${ROOT}/usr/lib64" >> $GITHUB_ENV
        echo "PKG_CONFIG_PATH=${ROOT}/usr/lib/pkgconfig" >> $GITHUB_ENV
        echo "LD_LIBRARY_PATH=${ROOT}/usr/lib" >> $GITHUB_ENV

    - name: build libplist
      run: |
        wget -q -nc -P ${DOWNLOAD_PATH} \
          https://github.com/libimobiledevice/libplist/releases/download/${LIBPLIST_VERSION}/libplist-${LIBPLIST_VERSION}.tar.bz2
        tar xf ${DOWNLOAD_PATH}/libplist-${LIBPLIST_VERSION}.tar.bz2 -C ${DEP_PATH}

        cd ${DEP_PATH}/libplist-${LIBPLIST_VERSION}
        ./configure --host=${TRIPLE} --prefix=/usr --without-cython --enable-static --disable-shared
        make -j$(nproc)
        make install DESTDIR="${ROOT}"

    - name: build libirecovery
      run: |
        wget -q -nc -P ${DOWNLOAD_PATH} \
          https://github.com/libimobiledevice/libirecovery/releases/download/${LIBIRECOVERY_VERSION}/libirecovery-${LIBIRECOVERY_VERSION}.tar.bz2
        tar xf ${DOWNLOAD_PATH}/libirecovery-${LIBIRECOVERY_VERSION}.tar.bz2 -C ${DEP_PATH}

        cd ${DEP_PATH}/libirecovery-${LIBIRECOVERY_VERSION}
        wget -q https://gist.github.com/1Conan/2d015aad17f87f171b32ebfd9f48fb96/raw/c12fca047f8b0bba1c8983470bf863d80d7e1c1d/libirecovery.patch
        patch -p1 < libirecovery.patch
        libtoolize --force
        aclocal -I m4
        autoheader
        automake --add-missing
        autoconf
        ./configure --host=${TRIPLE} --prefix=/usr --enable-static --disable-shared --with-dummy
        make -j$(nproc)
        make install DESTDIR="${ROOT}"

    - name: build zlib
      run: |
        wget -q -nc -P ${DOWNLOAD_PATH} \
          https://zlib.net/zlib-${ZLIB_VERSION}.tar.gz
        tar xf ${DOWNLOAD_PATH}/zlib-${ZLIB_VERSION}.tar.gz -C ${DEP_PATH}

        cd ${DEP_PATH}/zlib-${ZLIB_VERSION}
        ./configure --static --prefix=/usr
        make -j$(nproc)
        make install DESTDIR="${ROOT}"

    - name: build openssl
      run: |
        wget -q -nc -P ${DOWNLOAD_PATH} \
          https://www.openssl.org/source/openssl-${OPENSSL_VERSION}.tar.gz
        tar xf ${DOWNLOAD_PATH}/openssl-${OPENSSL_VERSION}.tar.gz -C ${DEP_PATH}

        if [ "${OS}" = "linux" ]; then
          case ${ARCH} in
            x86_64|aarch64|mips64*)
              export PLATFORM="linux-generic64"
              ;;
            i686|i486|arm*|mips)
              export PLATFORM="linux-generic32"
              ;;
          esac
        elif [ "${OS}" = "win" ]; then
          case ${ARCH} in
            x86_64)
              export PLATFORM="mingw64"
            i686)
              export PLATFORM="mingw"
          esac
        fi
        cd ${DEP_PATH}/openssl-${OPENSSL_VERSION}
        CC= CXX= ./Configure --cross-compile-prefix=${TRIPLE}- --prefix=/usr --static -static ${OPENSSL_PLATFORM}
        make -j$(nproc) CC="${CC}" CXX="${CXX}"
        make install_sw DESTDIR="${ROOT}"

    - name: build libcurl
      run: |
        wget -q -nc -P ${DOWNLOAD_PATH} \
          https://curl.haxx.se/download/curl-${LIBCURL_VERSION}.tar.gz
        tar xf ${DOWNLOAD_PATH}/curl-${LIBCURL_VERSION}.tar.gz -C ${DEP_PATH}

        cd ${DEP_PATH}/curl-${LIBCURL_VERSION}

        if [ "${OS}" = "win" ]; then
          export CONFIGURE_FLAGS="--with-winssl --with-schannel"
        elif [ "${OS}" = "linux" ]; then
          export CONFIGURE_FLAGS="--with-openssl"
        fi

        ./configure \
          --prefix=/usr \
          --host=${TRIPLE} \
          --enable-static \
          --disable-shared \
          --enable-ipv6 \
          --disable-dependency-tracking \
          --with-zlib \
          ${CONFIGURE_FLAGS}
        make -j$(nproc)
        make install DESTDIR="${ROOT}"

    - name: build libzip
      run: |
        wget -q -nc -P ${DOWNLOAD_PATH} \
          https://libzip.org/download/libzip-${LIBZIP_VERSION}.tar.gz
        tar xf ${DOWNLOAD_PATH}/libzip-${LIBZIP_VERSION}.tar.gz -C ${DEP_PATH}
        cd ${DEP_PATH}/libzip-${LIBZIP_VERSION}

        if [ "${OS}" = "win" ]; then
          export CONFIGURE_FLAGS="-DCMAKE_SYSTEM_NAME=Windows"
        elif [ "${OS}" = "linux" ]; then
          export CONFIGURE_FLAGS="-DCMAKE_SYSTEM_NAME=Linux"
        fi

        cmake \
          ${LIBZIP_CONFIGURE_FLAGS} \
          -DCMAKE_CROSSCOMPILING=TRUE \
          -DBUILD_SHARED_LIBS=OFF \
          -DCMAKE_SHARED_LIBRARY_LINK_C_FLAGS="" \
          -DCMAKE_SHARED_LIBRARY_LINK_CXX_FLAGS="" \
          -DCMAKE_C_FLAGS="${CFLAGS} ${CPPFLAGS}" \
          -DCMAKE_EXE_LINKER_FLAGS="-static" \
          -DCMAKE_FIND_LIBRARY_SUFFIXES=".a" \
          -DENABLE_BZIP2=FALSE \
          -DENABLE_LZMA=FALSE \
          -DCMAKE_INSTALL_PREFIX=/usr \
          -DSKIP_BUILD_RPATH=TRUE \
          -DZLIB_LIBRARY=${ROOT}/usr/lib/libz.a \
          -DENABLE_GNUTLS=OFF \
          -DENABLE_OPENSSL=OFF \
          -DENABLE_MBEDTLS=OFF \
          -DENABLE_COMMONCRYPTO=OFF \
          -DENABLE_WINDOWS_CRYPTO=OFF \
          -DBUILD_TOOLS=OFF \
          -DBUILD_REGRESS=OFF \
          -DBUILD_EXAMPLES=OFF \
          -DBUILD_DOC=OFF

        make -j$(nproc)
        make install DESTDIR="${ROOT}"

    - name: build libgeneral
      run: |
        rm -rf ${DEP_PATH}/libgeneral
        git clone https://github.com/tihmstar/libgeneral ${DEP_PATH}/libgeneral
        cd ${DEP_PATH}/libgeneral
        git checkout ${LIBGENERAL_COMMIT}

        # Windows patches
        if [ "${OS}" = "win" ]; then
          # vasprintf
          sed -i '/using namespace tihmstar/a \
          int vasprintf(char **s, const char *fmt, va_list ap) {\
          \n\tva_list ap2;\n\tva_copy(ap2, ap);\
          \n\tint l = vsnprintf(0, 0, fmt, ap2);\
          \n\tva_end(ap2);\n\tif (l<0 || !(*s=(char*)malloc(l+1U))) return -1;\
          \n\treturn vsnprintf(*s, l+1U, fmt, ap);\
          \n}' ${DEP_PATH}/libgeneral/libgeneral/exception.cpp

          # threading patches
          sed -i 's/#include <thread>/#include <mingw.thread.h>/g' ${DEP_PATH}/libgeneral/include/libgeneral/Event.hpp
          sed -i 's/#include <mutex>/#include <mingw.mutex.h>/g' ${DEP_PATH}/libgeneral/include/libgeneral/Event.hpp
          sed -i 's/#include <condition_variable>/#include <mingw.condition_variable.h>/g' ${DEP_PATH}/libgeneral/include/libgeneral/Event.hpp
          sed -i 's/#include <future>/#include <mingw.future.h>/g' ${DEP_PATH}/libgeneral/include/libgeneral/Manager.hpp
          sed -i 's/sched_yield/std::this_thread::yield/g' ${DEP_PATH}/libgeneral/libgeneral/Manager.cpp
          sed -i 's/#include <mutex>/#include <mingw.mutex.h>/g' ${DEP_PATH}/libgeneral/include/libgeneral/lck_container.hpp
        fi

        ./autogen.sh --enable-static --disable-shared --host=${TRIPLE} --prefix=/usr
        make -j$(nproc)
        make install DESTDIR="${ROOT}"

    - name: build libfragmentzip
      run: |
        rm -rf ${DEP_PATH}/libfragmentzip
        git clone https://github.com/tihmstar/libfragmentzip.git ${DEP_PATH}/libfragmentzip
        cd ${DEP_PATH}/libfragmentzip
        ./autogen.sh curl_LIBS="${ROOT}/usr/lib/libcurl.a" \
          --prefix=/usr \
          --host=${TRIPLE} \
          --enable-static \
          --disable-shared
        make -j$(nproc)
        make install DESTDIR="${ROOT}"

    - name: build tsschecker
      run: |
        ./autogen.sh --host=${TRIPLE} --enable-static --disable-shared

        if [ "${OS}" = "win" ]; then
          export LDFLAGS="${LDFLAGS} -lws2_32"
          export LIBS="-lws2_32 -lcrypt32"
        fi

        make LDFLAGS="-all-static ${LDFLAGS}"
        ${TRIPLE}-strip tsschecker/tsschecker${EXE_SUFFIX}
    - uses: actions/upload-artifact@v1
      with:
        name: tsschecker_${{ env.OS }}_${{ env.ARCH }}
        path: tsschecker/tsschecker${{ env.EXE_SUFFIX }}
